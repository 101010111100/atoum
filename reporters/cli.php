<?php

namespace mageekguy\tests\unit\reporters;

use \mageekguy\tests\unit\test;

class cli extends \mageekguy\tests\unit\reporter
{
	protected $run = 0;
	protected $start = 0.0;
	protected $progressBar = '';
	protected $testMethods = 0;
	protected $size = 0;

	public function manageObservableEvent(\mageekguy\tests\unit\observable $test, $event)
	{
		switch ($event)
		{
			case test::eventRunStart:
				$this->runStart($test);
				break;

			case test::eventBeforeTestMethod:
				$this->testMethods++;
				break;

			case test::eventSuccess:
				$this->progressBar('.');
				break;

			case test::eventFailure:
				$this->progressBar('F');
				break;

			case test::eventError:
				$this->progressBar('!');
				break;

			case test::eventException:
				$this->progressBar('E');
				break;

			case test::eventRunEnd:
				$this->runEnd($test);
				break;
		}
	}

	protected function runStart(\mageekguy\tests\unit\test $test)
	{
		if ($this->run == 0)
		{
			self::write(sprintf($this->locale->_('\mageekguy\tests\unit\test version %s by %s.'), $test->getVersion(), \mageekguy\tests\unit\test::author));

			$this->start = microtime(true);
			$this->progressBar = '';
			$this->testMethods = 0;
			$this->size = sizeof($test);
		}

		$this->progressBar();

		$this->run++;
	}

	protected function progressBar($dot = '')
	{
		$end = '[' . sprintf('%' . strlen($this->size) . 'd', $this->testMethods) . '/' . $this->size . ']';

		if (strlen($this->progressBar) >= 60)
		{
			self::write();
		}
		else
		{
			echo str_repeat("\010", 60 + strlen($end));
		}

		$this->progressBar .= $dot;

		echo str_pad(str_pad($this->progressBar, $this->size, '?', STR_PAD_RIGHT), 60, '_', STR_PAD_RIGHT) . $end;
	}

	protected function runEnd(\mageekguy\tests\unit\test $test)
	{
		$duration = (microtime(true) - $this->start);

		self::write();
		self::write(sprintf($this->locale->__('Duration: %4.2f second, Memory %4.2f Mb.', 'Duration: %4.2f seconds, Memory %4.2f Mb', $duration), $duration, memory_get_peak_usage(true) / 1048576));

		$score = $test->getScore();

		$failNumber = $score->getFailNumber();

		if ($failNumber <= 0)
		{
			self::write($this->locale->_('Success !'));
		}
		else
		{
			self::write(sprintf($this->locale->__('There was %d failure', 'There were %d failures', $failNumber), $failNumber) . ':');

			foreach ($score->getFailAssertions() as $assertion)
			{
				self::write($assertion['class'] . '::' . $assertion['method'] . '():', 1);
				self::write(sprintf('%s failed because %s in file %s at line %d', $assertion['asserter'], $assertion['fail'], $assertion['file'], $assertion['line']), 2);
			}
		}

		$errorNumber = $score->getErrorNumber();

		if ($errorNumber > 0)
		{
			self::write(sprintf($this->locale->__('There was %d error', 'There were %d errors', $errorNumber), $errorNumber) . ':');

			foreach ($score->getErrors() as $error)
			{
				self::write($assertion['class'] . '::' . $assertion['method'] . '():', 1);
				self::write(sprintf($this->locale->_('Error %s with message \'%s\' generated by file %s at line %d'), $error['type'], $error['message'], $error['file'], $error['line']), 2);
			}
		}

		$exceptionNumber = $score->getErrorNumber();

		if ($exceptionNumber > 0)
		{
			self::write(sprintf($this->locale->__('There was %d exception', 'There were %d exceptions', $exceptionNumber), $exceptionNumber) . ':');

			foreach ($score->getErrors() as $exception)
			{
				self::write($assertion['class'] . '::' . $assertion['method'] . '():', 1);
				self::write(sprintf($this->locale->_('Exception %s with message \'%s\' generated by file %s at line %d'), get_class($exception['exception']), $exception['exception']->getMessage(), $exception['file'], $exception['line']), 2);
			}
		}

		return $this;
	}

	public static function write($message = '', $level = 0)
	{
		if ($message != '')
		{
			echo ($level <= 0 ? '' : str_repeat("\t", $level)) . ltrim($message);
		}

		echo PHP_EOL;
	}
}

?>
