<?php

namespace mageekguy\tests\unit\reporters;

use \mageekguy\tests\unit\runner;
use \mageekguy\tests\unit\test;

class cli extends \mageekguy\tests\unit\reporter
{
	protected $run = 0;
	protected $start = 0.0;
	protected $progressBar = '';
	protected $testMethods = 0;
	protected $testMethodNumber = 0;

	protected function runStart(\mageekguy\tests\unit\runner $runner)
	{
		$this->start = microtime(true);

		self::write(sprintf($this->locale->_('\mageekguy\tests\unit\test version %s by %s.'), \mageekguy\tests\unit\test::getVersion(), \mageekguy\tests\unit\test::author));

		return $this;
	}

	protected function testRunStart(\mageekguy\tests\unit\test $test)
	{
		$this->run++;
		$this->progressBar = '';
		$this->testMethods = 0;
		$this->testMethodNumber = sizeof($test);

		self::write(sprintf($this->locale->_('Run %s...'), $test->getClass()));
		$this->progressBar();
	}

	protected function beforeTestMethod(\mageekguy\tests\unit\test $test)
	{
		$this->testMethods++;
		return $this;
	}

	protected function success(\mageekguy\tests\unit\test $test)
	{
		return $this->progressBar('.');
	}

	protected function failure(\mageekguy\tests\unit\test $test)
	{
		return $this->progressBar('F');
	}

	protected function error(\mageekguy\tests\unit\test $test)
	{
		return $this->progressBar('!');
	}

	protected function exception(\mageekguy\tests\unit\test $test)
	{
		return $this->progressBar('!');
	}

	protected function testRunEnd(\mageekguy\tests\unit\test $test)
	{
		$score = $test->getScore();

		$failNumber = $score->getFailNumber();
		$errorNumber = $score->getErrorNumber();
		$exceptionNumber = $score->getExceptionNumber();
		$outputNumber = $score->getOutputNumber();
		$duration = $score->getTotalDuration();

		self::write();

		if ($failNumber > 0)
		{
			self::write(sprintf($this->locale->_('Failure ! (%s, %s, %s)'), sprintf($this->locale->__('%d test', '%d tests', $this->testMethodNumber), $this->testMethodNumber), sprintf($this->locale->__('%d assertion', '%d assertions', $score->getAssertionNumber()), $score->getAssertionNumber()), sprintf($this->locale->__('%d failure', '%d failures', $failNumber), $failNumber)));
		}
		else
		{
			$problemNumber = $errorNumber + $exceptionNumber;

			if ($problemNumber === 0)
			{
				self::write(sprintf($this->locale->_('Success ! (%s, %s)'), sprintf($this->locale->__('%d test', '%d tests', $this->testMethodNumber), $this->testMethodNumber), sprintf($this->locale->__('%d assertion', '%d assertions', $score->getAssertionNumber()), $score->getAssertionNumber())));
			}
			else
			{
				self::write(sprintf($this->locale->__('Success, but there is %s problem...', 'Success, but there are %s problems...', $problemNumber), $problemNumber));
			}
		}

		self::write(sprintf($this->locale->__('Test duration: %4.2f second, Test memory usage: %4.2f Mb.', 'Test duration: %4.2f seconds, Test memory usage: %4.2f Mb', $duration), $duration, $score->getTotalMemoryUsage() / 1048576));

		if ($outputNumber > 0)
		{
			self::write($this->locale->_('Output:'));

			foreach ($score->getOutputs() as $output)
			{
				self::write($output['class'] . '::' . $output['method'] . '():', 1);

				foreach (explode("\n", trim($output['value'])) as $line)
				{
					self::write($line, 2);
				}
			}
		}

		if ($failNumber > 0)
		{
			self::write(sprintf($this->locale->__('There was %d failure', 'There were %d failures', $failNumber), $failNumber) . ':');

			foreach ($score->getFailAssertions() as $assertion)
			{
				self::write($assertion['class'] . '::' . $assertion['method'] . '():', 1);
				self::write(sprintf('%s failed because %s in file %s at line %d', $assertion['asserter'], $assertion['fail'], $assertion['file'], $assertion['line']), 2);
			}
		}

		if ($errorNumber > 0)
		{
			self::write(sprintf($this->locale->__('There was %d error', 'There were %d errors', $errorNumber), $errorNumber) . ':');

			foreach ($score->getErrors() as $error)
			{
				self::write($error['class'] . '::' . $error['method'] . '():', 1);
				self::write(sprintf($this->locale->_('Error %s with message \'%s\' generated by file %s at line %d'), self::getErrorLabel($error['type']), $error['message'], $error['file'], $error['line']), 2);
			}
		}

		if ($exceptionNumber > 0)
		{
			self::write(sprintf($this->locale->__('There was %d exception', 'There were %d exceptions', $exceptionNumber), $exceptionNumber) . ':');

			foreach ($score->getExceptions() as $exception)
			{
				self::write($exception['class'] . '::' . $exception['method'] . '():', 1);

				foreach (explode("\n", $exception['value']) as $line)
				{
					self::write($line, 2);
				}
			}
		}

		return $this;
	}

	protected function runEnd(\mageekguy\tests\unit\runner $runner)
	{
		$duration = microtime(true) - $this->start;

		self::write(sprintf($this->locale->__('Total duration: %4.2f second, Total memory usage: %4.2f Mb.', 'Total duration: %4.2f seconds, Total memory usage: %4.2f Mb', $duration), $duration, memory_get_peak_usage(true) / 1048576));

		return $this;
	}

	protected function progressBar($dot = '')
	{
		$end = '[' . sprintf('%' . strlen($this->testMethodNumber) . 'd', $this->testMethods) . '/' . $this->testMethodNumber . ']';

		if (strlen($this->progressBar) >= 60)
		{
			self::write();
		}
		else if ($this->testMethods > 0)
		{
			echo str_repeat("\010", 60 + strlen($end));
		}

		$this->progressBar .= $dot;

		echo str_pad(str_pad($this->progressBar, $this->testMethodNumber, '?', STR_PAD_RIGHT), 60, '_', STR_PAD_RIGHT) . $end;

		return $this;
	}

	public static function write($message = '', $level = 0)
	{
		if ($message != '')
		{
			echo ($level <= 0 ? '' : str_repeat('   ', $level)) . ltrim($message);
		}

		echo PHP_EOL;
	}
}

?>
